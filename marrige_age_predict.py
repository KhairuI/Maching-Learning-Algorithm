# -*- coding: utf-8 -*-
"""Marrige Age Predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pZVMxBz_dJ3ZS87nf84-vP4VOjagOQlt

Marrige Year Predict use to random forest algorithm / Regression
"""

import pandas as pd

"""File upload here"""

from google.colab import files
files.upload()

myFile=  pd.read_csv('age_of_marriage_data.csv')
myFile.head()

"""Find here the total amount of data....."""

print(myFile.shape)

"""Now check the null value....."""

myFile.isnull().sum()

"""Now drop all the null records......"""

myFile.dropna(inplace=True)

print(myFile.shape)

myFile.head()

"""Here see the unique value of any column"""

myFile.religion.unique()

myFile.profession.unique()

"""Now seperate the data in input output...."""

X= myFile.loc[:,['gender','height','religion','caste','mother_tongue','country']]
Y= myFile.age_of_marriage

X.head()

"""Now lebel the string / convert string to numeric value"""

# import library
from sklearn.preprocessing import LabelEncoder
enc= LabelEncoder()

X.loc[:,['gender','religion','caste','mother_tongue','country']] = \
X.loc[:,['gender','religion','caste','mother_tongue','country']].apply(enc.fit_transform)

X.head()

"""Now convert hight into centemeters.....

"""

X.loc[1,'height']

X.loc[138,'height'].split('\'')[0]

"""1 feet = 30.48 cm , 
1 inches = 2.54 cm
"""

int(X.loc[1,'height'].split('\'')[0]) * 30.48

"""for fraction value...

"""

int(X.loc[1,'height'].split('\'')[1].replace('"','')) * 2.54

def h_con(h): 
    return int(h.split('\'')[0]) * 30.48 + \
    int(h.split('\'')[1].replace('"','')) * 2.54

"""Now the convert of whole height column and add it in data set...."""

X['height_cms']= X.height.apply(h_con)

X.head()

"""Now drop the original "height" . It is not needed now...."""

X.drop('height',inplace=True,axis=1)

X.head()

# import the library
from sklearn.model_selection import train_test_split

Y.head()

Xtrain, Xtest, Ytrain, Ytest= train_test_split(X,Y, test_size= 0.2, random_state=0)

# import library....
from sklearn.ensemble import RandomForestRegressor
model= RandomForestRegressor(n_estimators=100,max_depth=11)
model.fit(Xtrain,Ytrain)
Ypredict = model.predict(Xtest)

Ypredict

"""# **Now Evaluation**


"""

from sklearn.metrics import mean_absolute_error, r2_score

print("MAE: ",mean_absolute_error(Ytest,Ypredict))

"""testing score...."""

test_score= f'{r2_score(Ytest,Ypredict) *100:.3f} %'

"""Traning """

traning_score= f'{r2_score(Ytrain,model.predict(Xtrain)) *100:.3f} %'

print("Traning Score(%)","Testing Score(%)")
print("----------------------")
print(traning_score,"\t",test_score)

"""## **Now export this model**"""

from sklearn.externals import joblib
joblib.dump(model,'marrige_age.ml')